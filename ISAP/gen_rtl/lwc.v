`define BSV_POSITIVE_RESET
`define BSV_NO_INITIAL_BLOCKS
//
// Generated by Bluespec Compiler (build 7d25cde)
//
// On Mon Jan  4 21:30:06 CET 2021
//
//
// Ports:
// Name                         I/O  size props
// pdi_ready                      O     1
// sdi_ready                      O     1
// do_data                        O    32 reg
// do_last                        O     1 reg
// do_valid                       O     1
// clk                            I     1 clock
// rst                            I     1 reset
// pdi_data                       I    32 reg
// pdi_valid                      I     1
// sdi_data                       I    32 reg
// sdi_valid                      I     1
// do_ready                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module lwc(clk,
	   rst,

	   pdi_data,

	   pdi_valid,

	   pdi_ready,

	   sdi_data,

	   sdi_valid,

	   sdi_ready,

	   do_data,

	   do_last,

	   do_valid,

	   do_ready);
  input  clk;
  input  rst;

  // action method pdi_data
  input  [31 : 0] pdi_data;

  // action method pdi_valid
  input  pdi_valid;

  // value method pdi_ready
  output pdi_ready;

  // action method sdi_data
  input  [31 : 0] sdi_data;

  // action method sdi_valid
  input  sdi_valid;

  // value method sdi_ready
  output sdi_ready;

  // value method do__data
  output [31 : 0] do_data;

  // value method do__last
  output do_last;

  // value method do__valid
  output do_valid;

  // action method do__ready
  input  do_ready;

  // signals for module outputs
  wire [31 : 0] do_data;
  wire do_last, do_valid, pdi_ready, sdi_ready;

  // inlined wires
  wire [32 : 0] lwc_doSender_fifof_x_wire$wget,
		lwc_headersFifo_rv$port0__read,
		lwc_headersFifo_rv$port0__write_1,
		lwc_headersFifo_rv$port1__read,
		lwc_headersFifo_rv$port1__write_1,
		lwc_headersFifo_rv$port2__read,
		lwc_headersFifo_rv$port2__write_1,
		lwc_headersFifo_rv$port3__read,
		lwc_headersFifo_rv$port3__write_1,
		lwc_headersFifo_rv$port4__read,
		lwc_headersFifo_rv$port4__write_1,
		lwc_tagFifo_rv$port0__read,
		lwc_tagFifo_rv$port0__write_1,
		lwc_tagFifo_rv$port1__read,
		lwc_tagFifo_rv$port1__write_1,
		lwc_tagFifo_rv$port2__read,
		lwc_tagFifo_rv$port2__write_1,
		lwc_tagFifo_rv$port3__read,
		lwc_tagFifo_rv$port3__write_1,
		lwc_tagFifo_rv$port4__read,
		lwc_tagFifo_rv$port4__write_1;
  wire [31 : 0] lwc_pdiReceiver_data_wire$wget,
		lwc_sdiReceiver_data_wire$wget;
  wire lwc_doSender_deq_ready$whas,
       lwc_doSender_fifof_dequeueing$whas,
       lwc_doSender_fifof_enqueueing$whas,
       lwc_doSender_fifof_x_wire$whas,
       lwc_headersFifo_rv$EN_port0__write,
       lwc_headersFifo_rv$EN_port1__write,
       lwc_headersFifo_rv$EN_port2__write,
       lwc_headersFifo_rv$EN_port3__write,
       lwc_headersFifo_rv$EN_port4__write,
       lwc_pdiReceiver_deq_pw$whas,
       lwc_pdiReceiver_enq_pw$whas,
       lwc_pdiReceiver_enq_valid$whas,
       lwc_sdiReceiver_deq_pw$whas,
       lwc_sdiReceiver_enq_pw$whas,
       lwc_sdiReceiver_enq_valid$whas,
       lwc_tagFifo_rv$EN_port0__write,
       lwc_tagFifo_rv$EN_port1__write,
       lwc_tagFifo_rv$EN_port2__write,
       lwc_tagFifo_rv$EN_port3__write,
       lwc_tagFifo_rv$EN_port4__write;

  // register lwc_doSender_fifof_cntr_r
  reg [1 : 0] lwc_doSender_fifof_cntr_r;
  wire [1 : 0] lwc_doSender_fifof_cntr_r$D_IN;
  wire lwc_doSender_fifof_cntr_r$EN;

  // register lwc_doSender_fifof_q_0
  reg [32 : 0] lwc_doSender_fifof_q_0;
  reg [32 : 0] lwc_doSender_fifof_q_0$D_IN;
  wire lwc_doSender_fifof_q_0$EN;

  // register lwc_doSender_fifof_q_1
  reg [32 : 0] lwc_doSender_fifof_q_1;
  reg [32 : 0] lwc_doSender_fifof_q_1$D_IN;
  wire lwc_doSender_fifof_q_1$EN;

  // register lwc_finalRemainBytes
  reg [1 : 0] lwc_finalRemainBytes;
  wire [1 : 0] lwc_finalRemainBytes$D_IN;
  wire lwc_finalRemainBytes$EN;

  // register lwc_headersFifo_rv
  reg [32 : 0] lwc_headersFifo_rv;
  wire [32 : 0] lwc_headersFifo_rv$D_IN;
  wire lwc_headersFifo_rv$EN;

  // register lwc_inSegEoT
  reg lwc_inSegEoT;
  wire lwc_inSegEoT$D_IN, lwc_inSegEoT$EN;

  // register lwc_inSegLast
  reg lwc_inSegLast;
  wire lwc_inSegLast$D_IN, lwc_inSegLast$EN;

  // register lwc_inSegType
  reg [3 : 0] lwc_inSegType;
  wire [3 : 0] lwc_inSegType$D_IN;
  wire lwc_inSegType$EN;

  // register lwc_inState
  reg [3 : 0] lwc_inState;
  reg [3 : 0] lwc_inState$D_IN;
  wire lwc_inState$EN;

  // register lwc_inWordCounter
  reg [13 : 0] lwc_inWordCounter;
  reg [13 : 0] lwc_inWordCounter$D_IN;
  wire lwc_inWordCounter$EN;

  // register lwc_outCounter
  reg [13 : 0] lwc_outCounter;
  reg [13 : 0] lwc_outCounter$D_IN;
  wire lwc_outCounter$EN;

  // register lwc_outRemainder
  reg [1 : 0] lwc_outRemainder;
  wire [1 : 0] lwc_outRemainder$D_IN;
  wire lwc_outRemainder$EN;

  // register lwc_outSegLast
  reg lwc_outSegLast;
  wire lwc_outSegLast$D_IN, lwc_outSegLast$EN;

  // register lwc_outSegType
  reg [3 : 0] lwc_outSegType;
  reg [3 : 0] lwc_outSegType$D_IN;
  wire lwc_outSegType$EN;

  // register lwc_outState
  reg [1 : 0] lwc_outState;
  reg [1 : 0] lwc_outState$D_IN;
  wire lwc_outState$EN;

  // register lwc_statFailure
  reg lwc_statFailure;
  wire lwc_statFailure$D_IN, lwc_statFailure$EN;

  // register lwc_tagFifo_rv
  reg [32 : 0] lwc_tagFifo_rv;
  wire [32 : 0] lwc_tagFifo_rv$D_IN;
  wire lwc_tagFifo_rv$EN;

  // ports of submodule ascon
  wire [34 : 0] ascon$bdi_enq_el, ascon$bdo_first;
  wire [3 : 0] ascon$process_typ;
  wire ascon$EN_bdi_enq,
       ascon$EN_bdo_deq,
       ascon$EN_process,
       ascon$RDY_bdi_enq,
       ascon$RDY_bdo_deq,
       ascon$RDY_process,
       ascon$process_empty;

  // ports of submodule lwc_pdiReceiver_fifof
  wire [31 : 0] lwc_pdiReceiver_fifof$D_IN, lwc_pdiReceiver_fifof$D_OUT;
  wire lwc_pdiReceiver_fifof$CLR,
       lwc_pdiReceiver_fifof$DEQ,
       lwc_pdiReceiver_fifof$EMPTY_N,
       lwc_pdiReceiver_fifof$ENQ,
       lwc_pdiReceiver_fifof$FULL_N;

  // ports of submodule lwc_sdiReceiver_fifof
  wire [31 : 0] lwc_sdiReceiver_fifof$D_IN, lwc_sdiReceiver_fifof$D_OUT;
  wire lwc_sdiReceiver_fifof$CLR,
       lwc_sdiReceiver_fifof$DEQ,
       lwc_sdiReceiver_fifof$EMPTY_N,
       lwc_sdiReceiver_fifof$ENQ,
       lwc_sdiReceiver_fifof$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_lwc_doSender_do_deq,
       CAN_FIRE_RL_lwc_doSender_fifof_both,
       CAN_FIRE_RL_lwc_doSender_fifof_decCtr,
       CAN_FIRE_RL_lwc_doSender_fifof_incCtr,
       CAN_FIRE_RL_lwc_pdiReceiver_do_enq,
       CAN_FIRE_RL_lwc_rl_enq_tag,
       CAN_FIRE_RL_lwc_rl_feed_core_pdi,
       CAN_FIRE_RL_lwc_rl_feed_core_sdi,
       CAN_FIRE_RL_lwc_rl_get_pdi_hdr,
       CAN_FIRE_RL_lwc_rl_get_sdi_hdr,
       CAN_FIRE_RL_lwc_rl_get_sdi_inst,
       CAN_FIRE_RL_lwc_rl_get_tag_data,
       CAN_FIRE_RL_lwc_rl_get_tag_hdr,
       CAN_FIRE_RL_lwc_rl_out_header,
       CAN_FIRE_RL_lwc_rl_out_status,
       CAN_FIRE_RL_lwc_rl_pdi_instruction,
       CAN_FIRE_RL_lwc_rl_sendout_data,
       CAN_FIRE_RL_lwc_rl_verify_tag,
       CAN_FIRE_RL_lwc_sdiReceiver_do_enq,
       CAN_FIRE_do__ready,
       CAN_FIRE_pdi_data,
       CAN_FIRE_pdi_valid,
       CAN_FIRE_sdi_data,
       CAN_FIRE_sdi_valid,
       WILL_FIRE_RL_lwc_doSender_do_deq,
       WILL_FIRE_RL_lwc_doSender_fifof_both,
       WILL_FIRE_RL_lwc_doSender_fifof_decCtr,
       WILL_FIRE_RL_lwc_doSender_fifof_incCtr,
       WILL_FIRE_RL_lwc_pdiReceiver_do_enq,
       WILL_FIRE_RL_lwc_rl_enq_tag,
       WILL_FIRE_RL_lwc_rl_feed_core_pdi,
       WILL_FIRE_RL_lwc_rl_feed_core_sdi,
       WILL_FIRE_RL_lwc_rl_get_pdi_hdr,
       WILL_FIRE_RL_lwc_rl_get_sdi_hdr,
       WILL_FIRE_RL_lwc_rl_get_sdi_inst,
       WILL_FIRE_RL_lwc_rl_get_tag_data,
       WILL_FIRE_RL_lwc_rl_get_tag_hdr,
       WILL_FIRE_RL_lwc_rl_out_header,
       WILL_FIRE_RL_lwc_rl_out_status,
       WILL_FIRE_RL_lwc_rl_pdi_instruction,
       WILL_FIRE_RL_lwc_rl_sendout_data,
       WILL_FIRE_RL_lwc_rl_verify_tag,
       WILL_FIRE_RL_lwc_sdiReceiver_do_enq,
       WILL_FIRE_do__ready,
       WILL_FIRE_pdi_data,
       WILL_FIRE_pdi_valid,
       WILL_FIRE_sdi_data,
       WILL_FIRE_sdi_valid;

  // inputs to muxes for submodule ports
  reg [32 : 0] MUX_lwc_doSender_fifof_q_0$write_1__VAL_1,
	       MUX_lwc_headersFifo_rv$port1__write_1__VAL_1;
  reg [3 : 0] MUX_ascon$process_1__VAL_1, MUX_ascon$process_1__VAL_2;
  wire [34 : 0] MUX_ascon$bdi_enq_1__VAL_1, MUX_ascon$bdi_enq_1__VAL_2;
  wire [32 : 0] MUX_lwc_doSender_fifof_q_0$write_1__VAL_2,
		MUX_lwc_doSender_fifof_q_1$write_1__VAL_2,
		MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_1,
		MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_2,
		MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_3;
  wire [13 : 0] MUX_lwc_inWordCounter$write_1__VAL_1,
		MUX_lwc_outCounter$write_1__VAL_1,
		MUX_lwc_outCounter$write_1__VAL_2;
  wire [3 : 0] MUX_lwc_inState$write_1__VAL_2,
	       MUX_lwc_inState$write_1__VAL_4,
	       MUX_lwc_inState$write_1__VAL_5;
  wire [1 : 0] MUX_lwc_doSender_fifof_cntr_r$write_1__VAL_2,
	       MUX_lwc_outState$write_1__VAL_2,
	       MUX_lwc_outState$write_1__VAL_3;
  wire MUX_lwc_doSender_fifof_q_0$write_1__SEL_1,
       MUX_lwc_doSender_fifof_q_0$write_1__SEL_2,
       MUX_lwc_doSender_fifof_q_1$write_1__SEL_1,
       MUX_lwc_doSender_fifof_q_1$write_1__SEL_2,
       MUX_lwc_headersFifo_rv$port1__write_1__SEL_1,
       MUX_lwc_inState$write_1__SEL_1,
       MUX_lwc_inState$write_1__SEL_2,
       MUX_lwc_inState$write_1__SEL_3,
       MUX_lwc_inState$write_1__SEL_4,
       MUX_lwc_inWordCounter$write_1__SEL_1,
       MUX_lwc_inWordCounter$write_1__SEL_3,
       MUX_lwc_outCounter$write_1__SEL_1,
       MUX_lwc_outCounter$write_1__SEL_2,
       MUX_lwc_outState$write_1__SEL_1,
       MUX_lwc_outState$write_1__SEL_2,
       MUX_lwc_outState$write_1__SEL_3,
       MUX_lwc_statFailure$write_1__SEL_1;

  // remaining internal signals
  reg [31 : 0] CASE_asconbdo_first_BITS_1_TO_0_0_asconbdo_f_ETC__q1;
  wire [31 : 0] b__h5190, b__h5197, b__h5200, x__h5166, x__h5476;
  wire [13 : 0] x__h5392;
  wire [3 : 0] IF_lwc_inSegEoT_43_AND_lwc_inSegType_51_EQ_5_5_ETC___d158;
  wire [1 : 0] lwc_doSender_fifof_cntr_r_9_MINUS_1___d27;
  wire NOT_lwc_tagFifo_rv_port0__read__07_BITS_31_TO__ETC___d219,
       _dfoo1,
       _dfoo3,
       lwc_inWordCounter_33_BITS_13_TO_1_35_EQ_0_36_A_ETC___d144,
       lwc_outSegLast_41_AND_lwc_outSegType_42_EQ_4_4_ETC___d252;

  // action method pdi_data
  assign CAN_FIRE_pdi_data = 1'd1 ;
  assign WILL_FIRE_pdi_data = 1'd1 ;

  // action method pdi_valid
  assign CAN_FIRE_pdi_valid = 1'd1 ;
  assign WILL_FIRE_pdi_valid = 1'd1 ;

  // value method pdi_ready
  assign pdi_ready =
	     lwc_pdiReceiver_fifof$FULL_N || lwc_pdiReceiver_deq_pw$whas ;

  // action method sdi_data
  assign CAN_FIRE_sdi_data = 1'd1 ;
  assign WILL_FIRE_sdi_data = 1'd1 ;

  // action method sdi_valid
  assign CAN_FIRE_sdi_valid = 1'd1 ;
  assign WILL_FIRE_sdi_valid = 1'd1 ;

  // value method sdi_ready
  assign sdi_ready =
	     lwc_sdiReceiver_fifof$FULL_N || lwc_sdiReceiver_deq_pw$whas ;

  // value method do__data
  assign do_data = lwc_doSender_fifof_q_0[32:1] ;

  // value method do__last
  assign do_last = lwc_doSender_fifof_q_0[0] ;

  // value method do__valid
  assign do_valid = lwc_doSender_fifof_cntr_r != 2'd0 ;

  // action method do__ready
  assign CAN_FIRE_do__ready = 1'd1 ;
  assign WILL_FIRE_do__ready = 1'd1 ;

  // submodule ascon
  mkAsconCC ascon(.CLK(clk),
		  .RST_N(rst),
		  .bdi_enq_el(ascon$bdi_enq_el),
		  .process_empty(ascon$process_empty),
		  .process_typ(ascon$process_typ),
		  .EN_process(ascon$EN_process),
		  .EN_bdi_enq(ascon$EN_bdi_enq),
		  .EN_bdo_deq(ascon$EN_bdo_deq),
		  .RDY_process(ascon$RDY_process),
		  .RDY_bdi_enq(ascon$RDY_bdi_enq),
		  .RDY_bdo_deq(ascon$RDY_bdo_deq),
		  .bdo_notEmpty(),
		  .bdo_first(ascon$bdo_first));

  // submodule lwc_pdiReceiver_fifof
  FIFOL1 #(.width(32'd32)) lwc_pdiReceiver_fifof(.RST(rst),
						 .CLK(clk),
						 .D_IN(lwc_pdiReceiver_fifof$D_IN),
						 .ENQ(lwc_pdiReceiver_fifof$ENQ),
						 .DEQ(lwc_pdiReceiver_fifof$DEQ),
						 .CLR(lwc_pdiReceiver_fifof$CLR),
						 .D_OUT(lwc_pdiReceiver_fifof$D_OUT),
						 .FULL_N(lwc_pdiReceiver_fifof$FULL_N),
						 .EMPTY_N(lwc_pdiReceiver_fifof$EMPTY_N));

  // submodule lwc_sdiReceiver_fifof
  FIFOL1 #(.width(32'd32)) lwc_sdiReceiver_fifof(.RST(rst),
						 .CLK(clk),
						 .D_IN(lwc_sdiReceiver_fifof$D_IN),
						 .ENQ(lwc_sdiReceiver_fifof$ENQ),
						 .DEQ(lwc_sdiReceiver_fifof$DEQ),
						 .CLR(lwc_sdiReceiver_fifof$CLR),
						 .D_OUT(lwc_sdiReceiver_fifof$D_OUT),
						 .FULL_N(lwc_sdiReceiver_fifof$FULL_N),
						 .EMPTY_N(lwc_sdiReceiver_fifof$EMPTY_N));

  // rule RL_lwc_rl_pdi_instruction
  assign CAN_FIRE_RL_lwc_rl_pdi_instruction =
	     lwc_pdiReceiver_fifof$EMPTY_N && lwc_inState == 4'd0 ;
  assign WILL_FIRE_RL_lwc_rl_pdi_instruction =
	     CAN_FIRE_RL_lwc_rl_pdi_instruction ;

  // rule RL_lwc_rl_get_sdi_inst
  assign CAN_FIRE_RL_lwc_rl_get_sdi_inst =
	     lwc_sdiReceiver_fifof$EMPTY_N && lwc_inState == 4'd1 ;
  assign WILL_FIRE_RL_lwc_rl_get_sdi_inst = CAN_FIRE_RL_lwc_rl_get_sdi_inst ;

  // rule RL_lwc_rl_get_sdi_hdr
  assign CAN_FIRE_RL_lwc_rl_get_sdi_hdr =
	     ascon$RDY_process && lwc_sdiReceiver_fifof$EMPTY_N &&
	     lwc_inState == 4'd3 ;
  assign WILL_FIRE_RL_lwc_rl_get_sdi_hdr = CAN_FIRE_RL_lwc_rl_get_sdi_hdr ;

  // rule RL_lwc_rl_feed_core_sdi
  assign CAN_FIRE_RL_lwc_rl_feed_core_sdi =
	     ascon$RDY_bdi_enq && lwc_sdiReceiver_fifof$EMPTY_N &&
	     lwc_inState == 4'd8 ;
  assign WILL_FIRE_RL_lwc_rl_feed_core_sdi =
	     CAN_FIRE_RL_lwc_rl_feed_core_sdi ;

  // rule RL_lwc_rl_feed_core_pdi
  assign CAN_FIRE_RL_lwc_rl_feed_core_pdi =
	     ascon$RDY_bdi_enq && lwc_pdiReceiver_fifof$EMPTY_N &&
	     lwc_inState == 4'd4 ;
  assign WILL_FIRE_RL_lwc_rl_feed_core_pdi =
	     CAN_FIRE_RL_lwc_rl_feed_core_pdi ;

  // rule RL_lwc_rl_get_tag_hdr
  assign CAN_FIRE_RL_lwc_rl_get_tag_hdr =
	     lwc_pdiReceiver_fifof$EMPTY_N && lwc_inState == 4'd5 ;
  assign WILL_FIRE_RL_lwc_rl_get_tag_hdr = CAN_FIRE_RL_lwc_rl_get_tag_hdr ;

  // rule RL_lwc_rl_out_header
  assign CAN_FIRE_RL_lwc_rl_out_header =
	     lwc_headersFifo_rv[32] && lwc_doSender_fifof_cntr_r != 2'd2 &&
	     lwc_outState == 2'd0 ;
  assign WILL_FIRE_RL_lwc_rl_out_header = CAN_FIRE_RL_lwc_rl_out_header ;

  // rule RL_lwc_rl_get_pdi_hdr
  assign CAN_FIRE_RL_lwc_rl_get_pdi_hdr =
	     ascon$RDY_process && lwc_pdiReceiver_fifof$EMPTY_N &&
	     !lwc_headersFifo_rv$port1__read[32] &&
	     lwc_inState == 4'd2 ;
  assign WILL_FIRE_RL_lwc_rl_get_pdi_hdr = CAN_FIRE_RL_lwc_rl_get_pdi_hdr ;

  // rule RL_lwc_rl_enq_tag
  assign CAN_FIRE_RL_lwc_rl_enq_tag =
	     !lwc_headersFifo_rv$port1__read[32] && lwc_inState == 4'd7 ;
  assign WILL_FIRE_RL_lwc_rl_enq_tag = CAN_FIRE_RL_lwc_rl_enq_tag ;

  // rule RL_lwc_rl_verify_tag
  assign CAN_FIRE_RL_lwc_rl_verify_tag =
	     lwc_tagFifo_rv[32] && ascon$RDY_bdo_deq && lwc_outState == 2'd2 ;
  assign WILL_FIRE_RL_lwc_rl_verify_tag = CAN_FIRE_RL_lwc_rl_verify_tag ;

  // rule RL_lwc_rl_get_tag_data
  assign CAN_FIRE_RL_lwc_rl_get_tag_data =
	     lwc_pdiReceiver_fifof$EMPTY_N &&
	     !lwc_tagFifo_rv$port1__read[32] &&
	     lwc_inState == 4'd6 ;
  assign WILL_FIRE_RL_lwc_rl_get_tag_data = CAN_FIRE_RL_lwc_rl_get_tag_data ;

  // rule RL_lwc_rl_sendout_data
  assign CAN_FIRE_RL_lwc_rl_sendout_data =
	     lwc_doSender_fifof_cntr_r != 2'd2 && ascon$RDY_bdo_deq &&
	     lwc_outState == 2'd1 ;
  assign WILL_FIRE_RL_lwc_rl_sendout_data = CAN_FIRE_RL_lwc_rl_sendout_data ;

  // rule RL_lwc_rl_out_status
  assign CAN_FIRE_RL_lwc_rl_out_status =
	     lwc_doSender_fifof_cntr_r != 2'd2 && lwc_outState == 2'd3 ;
  assign WILL_FIRE_RL_lwc_rl_out_status = CAN_FIRE_RL_lwc_rl_out_status ;

  // rule RL_lwc_pdiReceiver_do_enq
  assign CAN_FIRE_RL_lwc_pdiReceiver_do_enq =
	     lwc_pdiReceiver_fifof$FULL_N && pdi_valid ;
  assign WILL_FIRE_RL_lwc_pdiReceiver_do_enq =
	     CAN_FIRE_RL_lwc_pdiReceiver_do_enq ;

  // rule RL_lwc_sdiReceiver_do_enq
  assign CAN_FIRE_RL_lwc_sdiReceiver_do_enq =
	     lwc_sdiReceiver_fifof$FULL_N && sdi_valid ;
  assign WILL_FIRE_RL_lwc_sdiReceiver_do_enq =
	     CAN_FIRE_RL_lwc_sdiReceiver_do_enq ;

  // rule RL_lwc_doSender_do_deq
  assign CAN_FIRE_RL_lwc_doSender_do_deq =
	     lwc_doSender_fifof_cntr_r != 2'd0 && do_ready ;
  assign WILL_FIRE_RL_lwc_doSender_do_deq = CAN_FIRE_RL_lwc_doSender_do_deq ;

  // rule RL_lwc_doSender_fifof_incCtr
  assign CAN_FIRE_RL_lwc_doSender_fifof_incCtr =
	     lwc_doSender_fifof_x_wire$whas &&
	     lwc_doSender_fifof_enqueueing$whas &&
	     !CAN_FIRE_RL_lwc_doSender_do_deq ;
  assign WILL_FIRE_RL_lwc_doSender_fifof_incCtr =
	     CAN_FIRE_RL_lwc_doSender_fifof_incCtr ;

  // rule RL_lwc_doSender_fifof_decCtr
  assign CAN_FIRE_RL_lwc_doSender_fifof_decCtr =
	     CAN_FIRE_RL_lwc_doSender_do_deq &&
	     !lwc_doSender_fifof_enqueueing$whas ;
  assign WILL_FIRE_RL_lwc_doSender_fifof_decCtr =
	     CAN_FIRE_RL_lwc_doSender_fifof_decCtr ;

  // rule RL_lwc_doSender_fifof_both
  assign CAN_FIRE_RL_lwc_doSender_fifof_both =
	     lwc_doSender_fifof_x_wire$whas &&
	     CAN_FIRE_RL_lwc_doSender_do_deq &&
	     lwc_doSender_fifof_enqueueing$whas ;
  assign WILL_FIRE_RL_lwc_doSender_fifof_both =
	     CAN_FIRE_RL_lwc_doSender_fifof_both ;

  // inputs to muxes for submodule ports
  assign MUX_lwc_doSender_fifof_q_0$write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr &&
	     lwc_doSender_fifof_cntr_r == 2'd0 ;
  assign MUX_lwc_doSender_fifof_q_0$write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_doSender_fifof_both && _dfoo3 ;
  assign MUX_lwc_doSender_fifof_q_1$write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr &&
	     lwc_doSender_fifof_cntr_r == 2'd1 ;
  assign MUX_lwc_doSender_fifof_q_1$write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_doSender_fifof_both && _dfoo1 ;
  assign MUX_lwc_headersFifo_rv$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	     (lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd5 ||
	      lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd4 ||
	      lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd7 &&
	      lwc_pdiReceiver_fifof$D_OUT[24]) ;
  assign MUX_lwc_inState$write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_get_tag_data &&
	     lwc_inWordCounter[13:1] == 13'd0 ;
  assign MUX_lwc_inState$write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi &&
	     lwc_inWordCounter[13:1] == 13'd0 &&
	     (!lwc_inWordCounter[0] || lwc_finalRemainBytes == 2'd0) ;
  assign MUX_lwc_inState$write_1__SEL_3 =
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi &&
	     lwc_inWordCounter[13:1] == 13'd0 &&
	     (!lwc_inWordCounter[0] || lwc_finalRemainBytes == 2'd0) ;
  assign MUX_lwc_inState$write_1__SEL_4 =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	     (lwc_pdiReceiver_fifof$D_OUT[25] &&
	      lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd5 ||
	      lwc_pdiReceiver_fifof$D_OUT[24] ||
	      lwc_pdiReceiver_fifof$D_OUT[15:0] != 16'd0) ;
  assign MUX_lwc_inWordCounter$write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_get_tag_data ||
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ;
  assign MUX_lwc_inWordCounter$write_1__SEL_3 =
	     WILL_FIRE_RL_lwc_rl_get_tag_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ;
  assign MUX_lwc_outCounter$write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_out_header &&
	     (lwc_headersFifo_rv[31:28] == 4'd4 ||
	      lwc_headersFifo_rv[15:0] != 16'd0) ;
  assign MUX_lwc_outCounter$write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_rl_sendout_data &&
	     lwc_outSegLast_41_AND_lwc_outSegType_42_EQ_4_4_ETC___d252 ;
  assign MUX_lwc_outState$write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_verify_tag && lwc_outCounter[13:1] == 13'd0 ;
  assign MUX_lwc_outState$write_1__SEL_2 =
	     WILL_FIRE_RL_lwc_rl_sendout_data &&
	     lwc_outCounter[13:1] == 13'd0 &&
	     (!lwc_outCounter[0] || lwc_outRemainder == 2'd0) ;
  assign MUX_lwc_outState$write_1__SEL_3 =
	     WILL_FIRE_RL_lwc_rl_out_header &&
	     (lwc_headersFifo_rv[31:28] == 4'd4 || lwc_headersFifo_rv[24] ||
	      lwc_headersFifo_rv[15:0] != 16'd0) ;
  assign MUX_lwc_statFailure$write_1__SEL_1 =
	     WILL_FIRE_RL_lwc_rl_verify_tag &&
	     NOT_lwc_tagFifo_rv_port0__read__07_BITS_31_TO__ETC___d219 ;
  assign MUX_ascon$bdi_enq_1__VAL_1 =
	     { lwc_sdiReceiver_fifof$D_OUT,
	       lwc_inWordCounter_33_BITS_13_TO_1_35_EQ_0_36_A_ETC___d144,
	       lwc_finalRemainBytes } ;
  assign MUX_ascon$bdi_enq_1__VAL_2 =
	     { lwc_pdiReceiver_fifof$D_OUT,
	       lwc_inWordCounter_33_BITS_13_TO_1_35_EQ_0_36_A_ETC___d144,
	       lwc_finalRemainBytes } ;
  always@(lwc_pdiReceiver_fifof$D_OUT)
  begin
    case (lwc_pdiReceiver_fifof$D_OUT[31:28])
      4'd1, 4'd4, 4'd5, 4'd7, 4'd8, 4'd12, 4'd13:
	  MUX_ascon$process_1__VAL_1 = lwc_pdiReceiver_fifof$D_OUT[31:28];
      default: MUX_ascon$process_1__VAL_1 = 4'd9;
    endcase
  end
  always@(lwc_sdiReceiver_fifof$D_OUT)
  begin
    case (lwc_sdiReceiver_fifof$D_OUT[31:28])
      4'd1, 4'd4, 4'd5, 4'd7, 4'd8, 4'd12, 4'd13:
	  MUX_ascon$process_1__VAL_2 = lwc_sdiReceiver_fifof$D_OUT[31:28];
      default: MUX_ascon$process_1__VAL_2 = 4'd9;
    endcase
  end
  assign MUX_lwc_doSender_fifof_cntr_r$write_1__VAL_2 =
	     lwc_doSender_fifof_cntr_r + 2'd1 ;
  always@(WILL_FIRE_RL_lwc_rl_out_header or
	  MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_1 or
	  WILL_FIRE_RL_lwc_rl_sendout_data or
	  MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_2 or
	  WILL_FIRE_RL_lwc_rl_out_status or
	  MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_lwc_rl_out_header:
	  MUX_lwc_doSender_fifof_q_0$write_1__VAL_1 =
	      MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_1;
      WILL_FIRE_RL_lwc_rl_sendout_data:
	  MUX_lwc_doSender_fifof_q_0$write_1__VAL_1 =
	      MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_2;
      WILL_FIRE_RL_lwc_rl_out_status:
	  MUX_lwc_doSender_fifof_q_0$write_1__VAL_1 =
	      MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_3;
      default: MUX_lwc_doSender_fifof_q_0$write_1__VAL_1 =
		   33'h0AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign MUX_lwc_doSender_fifof_q_0$write_1__VAL_2 =
	     (lwc_doSender_fifof_cntr_r == 2'd1) ?
	       MUX_lwc_doSender_fifof_q_0$write_1__VAL_1 :
	       lwc_doSender_fifof_q_1 ;
  assign MUX_lwc_doSender_fifof_q_1$write_1__VAL_2 =
	     (lwc_doSender_fifof_cntr_r == 2'd2) ?
	       MUX_lwc_doSender_fifof_q_0$write_1__VAL_1 :
	       33'd0 ;
  assign MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_1 =
	     { lwc_headersFifo_rv[31:0], 1'd0 } ;
  assign MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_2 = { x__h5166, 1'd0 } ;
  assign MUX_lwc_doSender_fifof_x_wire$wset_1__VAL_3 = { x__h5476, 1'd1 } ;
  always@(lwc_pdiReceiver_fifof$D_OUT)
  begin
    case (lwc_pdiReceiver_fifof$D_OUT[31:28])
      4'd4:
	  MUX_lwc_headersFifo_rv$port1__write_1__VAL_1 =
	      { 7'd84,
		lwc_pdiReceiver_fifof$D_OUT[25],
		9'd0,
		lwc_pdiReceiver_fifof$D_OUT[15:0] };
      4'd5:
	  MUX_lwc_headersFifo_rv$port1__write_1__VAL_1 =
	      { 7'd80,
		lwc_pdiReceiver_fifof$D_OUT[25],
		9'd256,
		lwc_pdiReceiver_fifof$D_OUT[15:0] };
      default: MUX_lwc_headersFifo_rv$port1__write_1__VAL_1 = 33'h193000020;
    endcase
  end
  assign MUX_lwc_inState$write_1__VAL_2 =
	     (lwc_inSegEoT && lwc_inSegType == 4'd4) ?
	       4'd7 :
	       IF_lwc_inSegEoT_43_AND_lwc_inSegType_51_EQ_5_5_ETC___d158 ;
  assign MUX_lwc_inState$write_1__VAL_4 =
	     (lwc_pdiReceiver_fifof$D_OUT[15:0] == 16'd0) ?
	       ((lwc_pdiReceiver_fifof$D_OUT[25] &&
		 lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd5) ?
		  4'd5 :
		  ((lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd4) ?
		     4'd7 :
		     4'd0)) :
	       4'd4 ;
  assign MUX_lwc_inState$write_1__VAL_5 =
	     lwc_pdiReceiver_fifof$D_OUT[30] ? 4'd1 : 4'd2 ;
  assign MUX_lwc_inWordCounter$write_1__VAL_1 = lwc_inWordCounter - 14'd1 ;
  assign MUX_lwc_outCounter$write_1__VAL_1 =
	     (lwc_headersFifo_rv[15:0] == 16'd0) ?
	       14'd4 :
	       lwc_headersFifo_rv[15:2] ;
  assign MUX_lwc_outCounter$write_1__VAL_2 =
	     (lwc_outCounter[13:1] == 13'd0 &&
	      (!lwc_outCounter[0] || lwc_outRemainder == 2'd0)) ?
	       14'd4 :
	       x__h5392 ;
  assign MUX_lwc_outState$write_1__VAL_2 =
	     lwc_outSegLast ?
	       ((lwc_outSegType == 4'd4) ? 2'd2 : 2'd3) :
	       2'd0 ;
  assign MUX_lwc_outState$write_1__VAL_3 =
	     (lwc_headersFifo_rv[15:0] == 16'd0) ?
	       ((lwc_headersFifo_rv[31:28] == 4'd4) ? 2'd2 : 2'd3) :
	       2'd1 ;

  // inlined wires
  assign lwc_doSender_fifof_x_wire$wget =
	     MUX_lwc_doSender_fifof_q_0$write_1__VAL_1 ;
  assign lwc_doSender_fifof_x_wire$whas =
	     WILL_FIRE_RL_lwc_rl_out_header ||
	     WILL_FIRE_RL_lwc_rl_sendout_data ||
	     WILL_FIRE_RL_lwc_rl_out_status ;
  assign lwc_pdiReceiver_enq_valid$whas = pdi_valid ;
  assign lwc_pdiReceiver_enq_pw$whas = 1'b0 ;
  assign lwc_pdiReceiver_deq_pw$whas =
	     WILL_FIRE_RL_lwc_rl_get_tag_data ||
	     WILL_FIRE_RL_lwc_rl_get_tag_hdr ||
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_pdi_instruction ;
  assign lwc_sdiReceiver_enq_valid$whas = sdi_valid ;
  assign lwc_sdiReceiver_enq_pw$whas = 1'b0 ;
  assign lwc_sdiReceiver_deq_pw$whas =
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_inst ;
  assign lwc_doSender_fifof_enqueueing$whas =
	     WILL_FIRE_RL_lwc_rl_out_status ||
	     WILL_FIRE_RL_lwc_rl_sendout_data ||
	     WILL_FIRE_RL_lwc_rl_out_header ;
  assign lwc_doSender_fifof_dequeueing$whas =
	     CAN_FIRE_RL_lwc_doSender_do_deq ;
  assign lwc_doSender_deq_ready$whas = do_ready ;
  assign lwc_pdiReceiver_data_wire$wget = pdi_data ;
  assign lwc_sdiReceiver_data_wire$wget = sdi_data ;
  assign lwc_headersFifo_rv$port0__read = lwc_headersFifo_rv ;
  assign lwc_headersFifo_rv$EN_port0__write = CAN_FIRE_RL_lwc_rl_out_header ;
  assign lwc_headersFifo_rv$port0__write_1 = 33'h0AAAAAAAA ;
  assign lwc_headersFifo_rv$port1__read =
	     CAN_FIRE_RL_lwc_rl_out_header ?
	       33'h0AAAAAAAA :
	       lwc_headersFifo_rv ;
  assign lwc_headersFifo_rv$EN_port1__write =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	     (lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd5 ||
	      lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd4 ||
	      lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd7 &&
	      lwc_pdiReceiver_fifof$D_OUT[24]) ||
	     WILL_FIRE_RL_lwc_rl_enq_tag ;
  assign lwc_headersFifo_rv$port1__write_1 =
	     MUX_lwc_headersFifo_rv$port1__write_1__SEL_1 ?
	       MUX_lwc_headersFifo_rv$port1__write_1__VAL_1 :
	       33'h183000010 ;
  assign lwc_headersFifo_rv$port2__read =
	     lwc_headersFifo_rv$EN_port1__write ?
	       lwc_headersFifo_rv$port1__write_1 :
	       lwc_headersFifo_rv$port1__read ;
  assign lwc_headersFifo_rv$EN_port2__write = 1'b0 ;
  assign lwc_headersFifo_rv$port2__write_1 = 33'h0 ;
  assign lwc_headersFifo_rv$port3__read = lwc_headersFifo_rv$port2__read ;
  assign lwc_headersFifo_rv$EN_port3__write = 1'b0 ;
  assign lwc_headersFifo_rv$port3__write_1 = 33'h0 ;
  assign lwc_headersFifo_rv$port4__read = lwc_headersFifo_rv$port2__read ;
  assign lwc_headersFifo_rv$EN_port4__write = 1'b0 ;
  assign lwc_headersFifo_rv$port4__write_1 = 33'h0 ;
  assign lwc_tagFifo_rv$port0__read = lwc_tagFifo_rv ;
  assign lwc_tagFifo_rv$EN_port0__write = CAN_FIRE_RL_lwc_rl_verify_tag ;
  assign lwc_tagFifo_rv$port0__write_1 = 33'h0AAAAAAAA ;
  assign lwc_tagFifo_rv$port1__read =
	     CAN_FIRE_RL_lwc_rl_verify_tag ? 33'h0AAAAAAAA : lwc_tagFifo_rv ;
  assign lwc_tagFifo_rv$EN_port1__write = CAN_FIRE_RL_lwc_rl_get_tag_data ;
  assign lwc_tagFifo_rv$port1__write_1 =
	     { 1'd1, lwc_pdiReceiver_fifof$D_OUT } ;
  assign lwc_tagFifo_rv$port2__read =
	     CAN_FIRE_RL_lwc_rl_get_tag_data ?
	       lwc_tagFifo_rv$port1__write_1 :
	       lwc_tagFifo_rv$port1__read ;
  assign lwc_tagFifo_rv$EN_port2__write = 1'b0 ;
  assign lwc_tagFifo_rv$port2__write_1 = 33'h0 ;
  assign lwc_tagFifo_rv$port3__read = lwc_tagFifo_rv$port2__read ;
  assign lwc_tagFifo_rv$EN_port3__write = 1'b0 ;
  assign lwc_tagFifo_rv$port3__write_1 = 33'h0 ;
  assign lwc_tagFifo_rv$port4__read = lwc_tagFifo_rv$port2__read ;
  assign lwc_tagFifo_rv$EN_port4__write = 1'b0 ;
  assign lwc_tagFifo_rv$port4__write_1 = 33'h0 ;

  // register lwc_doSender_fifof_cntr_r
  assign lwc_doSender_fifof_cntr_r$D_IN =
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr ?
	       lwc_doSender_fifof_cntr_r_9_MINUS_1___d27 :
	       MUX_lwc_doSender_fifof_cntr_r$write_1__VAL_2 ;
  assign lwc_doSender_fifof_cntr_r$EN =
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr ||
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr ;

  // register lwc_doSender_fifof_q_0
  always@(MUX_lwc_doSender_fifof_q_0$write_1__SEL_1 or
	  MUX_lwc_doSender_fifof_q_0$write_1__VAL_1 or
	  MUX_lwc_doSender_fifof_q_0$write_1__SEL_2 or
	  MUX_lwc_doSender_fifof_q_0$write_1__VAL_2 or
	  WILL_FIRE_RL_lwc_doSender_fifof_decCtr or lwc_doSender_fifof_q_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lwc_doSender_fifof_q_0$write_1__SEL_1:
	  lwc_doSender_fifof_q_0$D_IN =
	      MUX_lwc_doSender_fifof_q_0$write_1__VAL_1;
      MUX_lwc_doSender_fifof_q_0$write_1__SEL_2:
	  lwc_doSender_fifof_q_0$D_IN =
	      MUX_lwc_doSender_fifof_q_0$write_1__VAL_2;
      WILL_FIRE_RL_lwc_doSender_fifof_decCtr:
	  lwc_doSender_fifof_q_0$D_IN = lwc_doSender_fifof_q_1;
      default: lwc_doSender_fifof_q_0$D_IN =
		   33'h0AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign lwc_doSender_fifof_q_0$EN =
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr &&
	     lwc_doSender_fifof_cntr_r == 2'd0 ||
	     WILL_FIRE_RL_lwc_doSender_fifof_both && _dfoo3 ||
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr ;

  // register lwc_doSender_fifof_q_1
  always@(MUX_lwc_doSender_fifof_q_1$write_1__SEL_1 or
	  MUX_lwc_doSender_fifof_q_0$write_1__VAL_1 or
	  MUX_lwc_doSender_fifof_q_1$write_1__SEL_2 or
	  MUX_lwc_doSender_fifof_q_1$write_1__VAL_2 or
	  WILL_FIRE_RL_lwc_doSender_fifof_decCtr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lwc_doSender_fifof_q_1$write_1__SEL_1:
	  lwc_doSender_fifof_q_1$D_IN =
	      MUX_lwc_doSender_fifof_q_0$write_1__VAL_1;
      MUX_lwc_doSender_fifof_q_1$write_1__SEL_2:
	  lwc_doSender_fifof_q_1$D_IN =
	      MUX_lwc_doSender_fifof_q_1$write_1__VAL_2;
      WILL_FIRE_RL_lwc_doSender_fifof_decCtr:
	  lwc_doSender_fifof_q_1$D_IN = 33'd0;
      default: lwc_doSender_fifof_q_1$D_IN =
		   33'h0AAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign lwc_doSender_fifof_q_1$EN =
	     WILL_FIRE_RL_lwc_doSender_fifof_incCtr &&
	     lwc_doSender_fifof_cntr_r == 2'd1 ||
	     WILL_FIRE_RL_lwc_doSender_fifof_both && _dfoo1 ||
	     WILL_FIRE_RL_lwc_doSender_fifof_decCtr ;

  // register lwc_finalRemainBytes
  assign lwc_finalRemainBytes$D_IN =
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ?
	       lwc_sdiReceiver_fifof$D_OUT[1:0] :
	       lwc_pdiReceiver_fifof$D_OUT[1:0] ;
  assign lwc_finalRemainBytes$EN =
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ;

  // register lwc_headersFifo_rv
  assign lwc_headersFifo_rv$D_IN = lwc_headersFifo_rv$port2__read ;
  assign lwc_headersFifo_rv$EN = 1'b1 ;

  // register lwc_inSegEoT
  assign lwc_inSegEoT$D_IN =
	     !WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     lwc_pdiReceiver_fifof$D_OUT[25] ;
  assign lwc_inSegEoT$EN =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ;

  // register lwc_inSegLast
  assign lwc_inSegLast$D_IN =
	     !WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     lwc_pdiReceiver_fifof$D_OUT[24] ;
  assign lwc_inSegLast$EN =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ;

  // register lwc_inSegType
  assign lwc_inSegType$D_IN = MUX_ascon$process_1__VAL_1 ;
  assign lwc_inSegType$EN = CAN_FIRE_RL_lwc_rl_get_pdi_hdr ;

  // register lwc_inState
  always@(MUX_lwc_inState$write_1__SEL_2 or
	  MUX_lwc_inState$write_1__VAL_2 or
	  MUX_lwc_inState$write_1__SEL_4 or
	  MUX_lwc_inState$write_1__VAL_4 or
	  WILL_FIRE_RL_lwc_rl_pdi_instruction or
	  MUX_lwc_inState$write_1__VAL_5 or
	  MUX_lwc_inState$write_1__SEL_1 or
	  MUX_lwc_inState$write_1__SEL_3 or
	  WILL_FIRE_RL_lwc_rl_enq_tag or
	  WILL_FIRE_RL_lwc_rl_get_sdi_inst or
	  WILL_FIRE_RL_lwc_rl_get_tag_hdr or WILL_FIRE_RL_lwc_rl_get_sdi_hdr)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lwc_inState$write_1__SEL_2:
	  lwc_inState$D_IN = MUX_lwc_inState$write_1__VAL_2;
      MUX_lwc_inState$write_1__SEL_4:
	  lwc_inState$D_IN = MUX_lwc_inState$write_1__VAL_4;
      WILL_FIRE_RL_lwc_rl_pdi_instruction:
	  lwc_inState$D_IN = MUX_lwc_inState$write_1__VAL_5;
      MUX_lwc_inState$write_1__SEL_1 || MUX_lwc_inState$write_1__SEL_3 ||
      WILL_FIRE_RL_lwc_rl_enq_tag:
	  lwc_inState$D_IN = 4'd0;
      WILL_FIRE_RL_lwc_rl_get_sdi_inst: lwc_inState$D_IN = 4'd3;
      WILL_FIRE_RL_lwc_rl_get_tag_hdr: lwc_inState$D_IN = 4'd6;
      WILL_FIRE_RL_lwc_rl_get_sdi_hdr: lwc_inState$D_IN = 4'd8;
      default: lwc_inState$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign lwc_inState$EN =
	     WILL_FIRE_RL_lwc_rl_get_tag_data &&
	     lwc_inWordCounter[13:1] == 13'd0 ||
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi &&
	     lwc_inWordCounter[13:1] == 13'd0 &&
	     (!lwc_inWordCounter[0] || lwc_finalRemainBytes == 2'd0) ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi &&
	     lwc_inWordCounter[13:1] == 13'd0 &&
	     (!lwc_inWordCounter[0] || lwc_finalRemainBytes == 2'd0) ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	     (lwc_pdiReceiver_fifof$D_OUT[25] &&
	      lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd5 ||
	      lwc_pdiReceiver_fifof$D_OUT[24] ||
	      lwc_pdiReceiver_fifof$D_OUT[15:0] != 16'd0) ||
	     WILL_FIRE_RL_lwc_rl_pdi_instruction ||
	     WILL_FIRE_RL_lwc_rl_enq_tag ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_inst ||
	     WILL_FIRE_RL_lwc_rl_get_tag_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ;

  // register lwc_inWordCounter
  always@(MUX_lwc_inWordCounter$write_1__SEL_1 or
	  MUX_lwc_inWordCounter$write_1__VAL_1 or
	  WILL_FIRE_RL_lwc_rl_get_sdi_hdr or
	  lwc_sdiReceiver_fifof$D_OUT or
	  MUX_lwc_inWordCounter$write_1__SEL_3 or lwc_pdiReceiver_fifof$D_OUT)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lwc_inWordCounter$write_1__SEL_1:
	  lwc_inWordCounter$D_IN = MUX_lwc_inWordCounter$write_1__VAL_1;
      WILL_FIRE_RL_lwc_rl_get_sdi_hdr:
	  lwc_inWordCounter$D_IN = lwc_sdiReceiver_fifof$D_OUT[15:2];
      MUX_lwc_inWordCounter$write_1__SEL_3:
	  lwc_inWordCounter$D_IN = lwc_pdiReceiver_fifof$D_OUT[15:2];
      default: lwc_inWordCounter$D_IN =
		   14'b10101010101010 /* unspecified value */ ;
    endcase
  end
  assign lwc_inWordCounter$EN =
	     WILL_FIRE_RL_lwc_rl_get_tag_data ||
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ||
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_tag_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ;

  // register lwc_outCounter
  always@(MUX_lwc_outCounter$write_1__SEL_1 or
	  MUX_lwc_outCounter$write_1__VAL_1 or
	  MUX_lwc_outCounter$write_1__SEL_2 or
	  MUX_lwc_outCounter$write_1__VAL_2 or
	  WILL_FIRE_RL_lwc_rl_verify_tag or x__h5392)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lwc_outCounter$write_1__SEL_1:
	  lwc_outCounter$D_IN = MUX_lwc_outCounter$write_1__VAL_1;
      MUX_lwc_outCounter$write_1__SEL_2:
	  lwc_outCounter$D_IN = MUX_lwc_outCounter$write_1__VAL_2;
      WILL_FIRE_RL_lwc_rl_verify_tag: lwc_outCounter$D_IN = x__h5392;
      default: lwc_outCounter$D_IN =
		   14'b10101010101010 /* unspecified value */ ;
    endcase
  end
  assign lwc_outCounter$EN =
	     WILL_FIRE_RL_lwc_rl_out_header &&
	     (lwc_headersFifo_rv[31:28] == 4'd4 ||
	      lwc_headersFifo_rv[15:0] != 16'd0) ||
	     WILL_FIRE_RL_lwc_rl_sendout_data &&
	     lwc_outSegLast_41_AND_lwc_outSegType_42_EQ_4_4_ETC___d252 ||
	     WILL_FIRE_RL_lwc_rl_verify_tag ;

  // register lwc_outRemainder
  assign lwc_outRemainder$D_IN = lwc_headersFifo_rv[1:0] ;
  assign lwc_outRemainder$EN = CAN_FIRE_RL_lwc_rl_out_header ;

  // register lwc_outSegLast
  assign lwc_outSegLast$D_IN = lwc_headersFifo_rv[24] ;
  assign lwc_outSegLast$EN = CAN_FIRE_RL_lwc_rl_out_header ;

  // register lwc_outSegType
  always@(lwc_headersFifo_rv)
  begin
    case (lwc_headersFifo_rv[31:28])
      4'd1, 4'd4, 4'd5, 4'd7, 4'd8, 4'd12, 4'd13:
	  lwc_outSegType$D_IN = lwc_headersFifo_rv[31:28];
      default: lwc_outSegType$D_IN = 4'd9;
    endcase
  end
  assign lwc_outSegType$EN = CAN_FIRE_RL_lwc_rl_out_header ;

  // register lwc_outState
  always@(MUX_lwc_outState$write_1__SEL_1 or
	  MUX_lwc_outState$write_1__SEL_2 or
	  MUX_lwc_outState$write_1__VAL_2 or
	  MUX_lwc_outState$write_1__SEL_3 or
	  MUX_lwc_outState$write_1__VAL_3 or WILL_FIRE_RL_lwc_rl_out_status)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lwc_outState$write_1__SEL_1: lwc_outState$D_IN = 2'd3;
      MUX_lwc_outState$write_1__SEL_2:
	  lwc_outState$D_IN = MUX_lwc_outState$write_1__VAL_2;
      MUX_lwc_outState$write_1__SEL_3:
	  lwc_outState$D_IN = MUX_lwc_outState$write_1__VAL_3;
      WILL_FIRE_RL_lwc_rl_out_status: lwc_outState$D_IN = 2'd0;
      default: lwc_outState$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign lwc_outState$EN =
	     WILL_FIRE_RL_lwc_rl_verify_tag &&
	     lwc_outCounter[13:1] == 13'd0 ||
	     WILL_FIRE_RL_lwc_rl_sendout_data &&
	     lwc_outCounter[13:1] == 13'd0 &&
	     (!lwc_outCounter[0] || lwc_outRemainder == 2'd0) ||
	     WILL_FIRE_RL_lwc_rl_out_header &&
	     (lwc_headersFifo_rv[31:28] == 4'd4 || lwc_headersFifo_rv[24] ||
	      lwc_headersFifo_rv[15:0] != 16'd0) ||
	     WILL_FIRE_RL_lwc_rl_out_status ;

  // register lwc_statFailure
  assign lwc_statFailure$D_IN = MUX_lwc_statFailure$write_1__SEL_1 ;
  assign lwc_statFailure$EN =
	     WILL_FIRE_RL_lwc_rl_verify_tag &&
	     NOT_lwc_tagFifo_rv_port0__read__07_BITS_31_TO__ETC___d219 ||
	     WILL_FIRE_RL_lwc_rl_out_status ;

  // register lwc_tagFifo_rv
  assign lwc_tagFifo_rv$D_IN = lwc_tagFifo_rv$port2__read ;
  assign lwc_tagFifo_rv$EN = 1'b1 ;

  // submodule ascon
  assign ascon$bdi_enq_el =
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ?
	       MUX_ascon$bdi_enq_1__VAL_1 :
	       MUX_ascon$bdi_enq_1__VAL_2 ;
  assign ascon$process_empty =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ?
	       lwc_pdiReceiver_fifof$D_OUT[15:0] == 16'd0 :
	       lwc_sdiReceiver_fifof$D_OUT[15:0] == 16'd0 ;
  assign ascon$process_typ =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ?
	       MUX_ascon$process_1__VAL_1 :
	       MUX_ascon$process_1__VAL_2 ;
  assign ascon$EN_process =
	     WILL_FIRE_RL_lwc_rl_get_pdi_hdr ||
	     WILL_FIRE_RL_lwc_rl_get_sdi_hdr ;
  assign ascon$EN_bdi_enq =
	     WILL_FIRE_RL_lwc_rl_feed_core_sdi ||
	     WILL_FIRE_RL_lwc_rl_feed_core_pdi ;
  assign ascon$EN_bdo_deq =
	     WILL_FIRE_RL_lwc_rl_sendout_data ||
	     WILL_FIRE_RL_lwc_rl_verify_tag ;

  // submodule lwc_pdiReceiver_fifof
  assign lwc_pdiReceiver_fifof$D_IN = pdi_data ;
  assign lwc_pdiReceiver_fifof$ENQ = CAN_FIRE_RL_lwc_pdiReceiver_do_enq ;
  assign lwc_pdiReceiver_fifof$DEQ = lwc_pdiReceiver_deq_pw$whas ;
  assign lwc_pdiReceiver_fifof$CLR = 1'b0 ;

  // submodule lwc_sdiReceiver_fifof
  assign lwc_sdiReceiver_fifof$D_IN = sdi_data ;
  assign lwc_sdiReceiver_fifof$ENQ = CAN_FIRE_RL_lwc_sdiReceiver_do_enq ;
  assign lwc_sdiReceiver_fifof$DEQ = lwc_sdiReceiver_deq_pw$whas ;
  assign lwc_sdiReceiver_fifof$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_lwc_inSegEoT_43_AND_lwc_inSegType_51_EQ_5_5_ETC___d158 =
	     (lwc_inSegEoT && lwc_inSegType == 4'd5) ?
	       4'd5 :
	       (lwc_inSegLast ? 4'd0 : 4'd2) ;
  assign NOT_lwc_tagFifo_rv_port0__read__07_BITS_31_TO__ETC___d219 =
	     lwc_tagFifo_rv[31:0] != ascon$bdo_first[34:3] ;
  assign _dfoo1 =
	     lwc_doSender_fifof_cntr_r != 2'd2 ||
	     lwc_doSender_fifof_cntr_r_9_MINUS_1___d27 == 2'd1 ;
  assign _dfoo3 =
	     lwc_doSender_fifof_cntr_r != 2'd1 ||
	     lwc_doSender_fifof_cntr_r_9_MINUS_1___d27 == 2'd0 ;
  assign b__h5190 = { 24'd0, ascon$bdo_first[10:3] } ;
  assign b__h5197 = { 16'd0, ascon$bdo_first[18:3] } ;
  assign b__h5200 = { 8'd0, ascon$bdo_first[26:3] } ;
  assign lwc_doSender_fifof_cntr_r_9_MINUS_1___d27 =
	     lwc_doSender_fifof_cntr_r - 2'd1 ;
  assign lwc_inWordCounter_33_BITS_13_TO_1_35_EQ_0_36_A_ETC___d144 =
	     lwc_inWordCounter[13:1] == 13'd0 &&
	     (!lwc_inWordCounter[0] || lwc_finalRemainBytes == 2'd0) &&
	     lwc_inSegEoT ;
  assign lwc_outSegLast_41_AND_lwc_outSegType_42_EQ_4_4_ETC___d252 =
	     lwc_outSegLast && lwc_outSegType == 4'd4 ||
	     lwc_outCounter[13:1] != 13'd0 ||
	     lwc_outCounter[0] && lwc_outRemainder != 2'd0 ;
  assign x__h5166 =
	     ascon$bdo_first[2] ?
	       CASE_asconbdo_first_BITS_1_TO_0_0_asconbdo_f_ETC__q1 :
	       ascon$bdo_first[34:3] ;
  assign x__h5392 = lwc_outCounter - 14'd1 ;
  assign x__h5476 = { 3'b111, lwc_statFailure, 28'b0 } ;
  always@(ascon$bdo_first or b__h5200 or b__h5190 or b__h5197)
  begin
    case (ascon$bdo_first[1:0])
      2'd0:
	  CASE_asconbdo_first_BITS_1_TO_0_0_asconbdo_f_ETC__q1 =
	      ascon$bdo_first[34:3];
      2'd1: CASE_asconbdo_first_BITS_1_TO_0_0_asconbdo_f_ETC__q1 = b__h5190;
      2'd2: CASE_asconbdo_first_BITS_1_TO_0_0_asconbdo_f_ETC__q1 = b__h5197;
      2'd3: CASE_asconbdo_first_BITS_1_TO_0_0_asconbdo_f_ETC__q1 = b__h5200;
    endcase
  end

  // handling of inlined registers

  always@(posedge clk)
  begin
    if (rst == `BSV_RESET_VALUE)
      begin
        lwc_doSender_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY 2'd0;
	lwc_doSender_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY 33'd0;
	lwc_doSender_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY 33'd0;
	lwc_headersFifo_rv <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
	lwc_inState <= `BSV_ASSIGNMENT_DELAY 4'd0;
	lwc_outState <= `BSV_ASSIGNMENT_DELAY 2'd0;
	lwc_statFailure <= `BSV_ASSIGNMENT_DELAY 1'd0;
	lwc_tagFifo_rv <= `BSV_ASSIGNMENT_DELAY 33'h0AAAAAAAA;
      end
    else
      begin
        if (lwc_doSender_fifof_cntr_r$EN)
	  lwc_doSender_fifof_cntr_r <= `BSV_ASSIGNMENT_DELAY
	      lwc_doSender_fifof_cntr_r$D_IN;
	if (lwc_doSender_fifof_q_0$EN)
	  lwc_doSender_fifof_q_0 <= `BSV_ASSIGNMENT_DELAY
	      lwc_doSender_fifof_q_0$D_IN;
	if (lwc_doSender_fifof_q_1$EN)
	  lwc_doSender_fifof_q_1 <= `BSV_ASSIGNMENT_DELAY
	      lwc_doSender_fifof_q_1$D_IN;
	if (lwc_headersFifo_rv$EN)
	  lwc_headersFifo_rv <= `BSV_ASSIGNMENT_DELAY lwc_headersFifo_rv$D_IN;
	if (lwc_inState$EN)
	  lwc_inState <= `BSV_ASSIGNMENT_DELAY lwc_inState$D_IN;
	if (lwc_outState$EN)
	  lwc_outState <= `BSV_ASSIGNMENT_DELAY lwc_outState$D_IN;
	if (lwc_statFailure$EN)
	  lwc_statFailure <= `BSV_ASSIGNMENT_DELAY lwc_statFailure$D_IN;
	if (lwc_tagFifo_rv$EN)
	  lwc_tagFifo_rv <= `BSV_ASSIGNMENT_DELAY lwc_tagFifo_rv$D_IN;
      end
    if (lwc_finalRemainBytes$EN)
      lwc_finalRemainBytes <= `BSV_ASSIGNMENT_DELAY lwc_finalRemainBytes$D_IN;
    if (lwc_inSegEoT$EN)
      lwc_inSegEoT <= `BSV_ASSIGNMENT_DELAY lwc_inSegEoT$D_IN;
    if (lwc_inSegLast$EN)
      lwc_inSegLast <= `BSV_ASSIGNMENT_DELAY lwc_inSegLast$D_IN;
    if (lwc_inSegType$EN)
      lwc_inSegType <= `BSV_ASSIGNMENT_DELAY lwc_inSegType$D_IN;
    if (lwc_inWordCounter$EN)
      lwc_inWordCounter <= `BSV_ASSIGNMENT_DELAY lwc_inWordCounter$D_IN;
    if (lwc_outCounter$EN)
      lwc_outCounter <= `BSV_ASSIGNMENT_DELAY lwc_outCounter$D_IN;
    if (lwc_outRemainder$EN)
      lwc_outRemainder <= `BSV_ASSIGNMENT_DELAY lwc_outRemainder$D_IN;
    if (lwc_outSegLast$EN)
      lwc_outSegLast <= `BSV_ASSIGNMENT_DELAY lwc_outSegLast$D_IN;
    if (lwc_outSegType$EN)
      lwc_outSegType <= `BSV_ASSIGNMENT_DELAY lwc_outSegType$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    lwc_doSender_fifof_cntr_r = 2'h2;
    lwc_doSender_fifof_q_0 = 33'h0AAAAAAAA;
    lwc_doSender_fifof_q_1 = 33'h0AAAAAAAA;
    lwc_finalRemainBytes = 2'h2;
    lwc_headersFifo_rv = 33'h0AAAAAAAA;
    lwc_inSegEoT = 1'h0;
    lwc_inSegLast = 1'h0;
    lwc_inSegType = 4'hA;
    lwc_inState = 4'hA;
    lwc_inWordCounter = 14'h2AAA;
    lwc_outCounter = 14'h2AAA;
    lwc_outRemainder = 2'h2;
    lwc_outSegLast = 1'h0;
    lwc_outSegType = 4'hA;
    lwc_outState = 2'h2;
    lwc_statFailure = 1'h0;
    lwc_tagFifo_rv = 33'h0AAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge clk)
  begin
    #0;
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lwc_rl_pdi_instruction)
	$display("PDI Instr ", lwc_pdiReceiver_fifof$D_OUT);
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lwc_rl_get_pdi_hdr) $write("Got header: typ: ");
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	  lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd1)
	$write("AD");
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	  lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd4)
	$write("Plaintext");
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	  lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd5)
	$write("Ciphertext");
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	  lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd8)
	$write("Tag");
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	  lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd12)
	$write("Key");
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	  lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd13)
	$write("Npub");
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	  lwc_pdiReceiver_fifof$D_OUT[31:28] == 4'd7)
	$write("HashMessage");
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lwc_rl_get_pdi_hdr &&
	  lwc_pdiReceiver_fifof$D_OUT[31:28] != 4'd1 &&
	  lwc_pdiReceiver_fifof$D_OUT[31:28] != 4'd4 &&
	  lwc_pdiReceiver_fifof$D_OUT[31:28] != 4'd5 &&
	  lwc_pdiReceiver_fifof$D_OUT[31:28] != 4'd8 &&
	  lwc_pdiReceiver_fifof$D_OUT[31:28] != 4'd12 &&
	  lwc_pdiReceiver_fifof$D_OUT[31:28] != 4'd13 &&
	  lwc_pdiReceiver_fifof$D_OUT[31:28] != 4'd7)
	$write("Digest");
    if (rst != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_lwc_rl_get_pdi_hdr)
	$write(", len: ",
	       lwc_pdiReceiver_fifof$D_OUT[15:0],
	       " eot:",
	       lwc_pdiReceiver_fifof$D_OUT[25],
	       " last:",
	       lwc_pdiReceiver_fifof$D_OUT[24],
	       "\n");
  end
  // synopsys translate_on
endmodule  // lwc

